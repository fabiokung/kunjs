# JAS :: JavaScript Alternative Syntax
# Test the JASPA Parser at http://timwhitlock.info/plug/examples/JASPA/Parser/JASParser.php
#
# Similar to ActionScript in many ways, but much stripped down:
# - No interfaces; 
# - No native XML support;
# - No namespaces.
# - No meta data
#
# AS2 features included:
# - type declaration
# - super calls
# - import statements
# - include statements
# - public, private, static accessors
# - get/set function accessors
#
# AS3 features included:
# - constants
# - "each" iterator
# - "as" "is" operators
# - bodyless function expressions
# - "..." rest parameter
# - function parameter initializers
# - additional accessors, protected, internal, etc..
#
# Syntax tightening:
# - no procedural code following a package block
# - no procedural code inside classes or packages
# - no package-level members
# 
# Syntax loosening:
# - literal and numeric property names allowed in object literals
#
# Syntax differing
# - classes private to a class file are inside the package not following the package block
# - no ":*" type declarations
# 
# Terminal symbols shared with ECMAScript maintain a "J_" prefix.
# JAS-specific symbols have their own "JAS_" prefix.




# Top-level program is either procedural code or a single package definition
#
<JAS_PROGRAM> 
    : <JAS_ELEMENTS>
    | <JAS_PACKAGE_DECL>
	;

# Packages may not be empty, but may be unamed
#
<JAS_PACKAGE_DECL>
	: J_PACKAGE "{" <JAS_PACKAGE_ELEMENTS> "}"
	| J_PACKAGE <JAS_IDENTIFIER_CHAIN> "{" <JAS_PACKAGE_ELEMENTS> "}"
	;
	
<JAS_IDENTIFIER_CHAIN>
	: J_IDENTIFIER
	| <JAS_IDENTIFIER_CHAIN> "." J_IDENTIFIER
	;

<JAS_PACKAGE_ELEMENTS>
	: <JAS_PACKAGE_ELEMENT>
	| <JAS_PACKAGE_ELEMENTS> <JAS_PACKAGE_ELEMENT>
	;
	
<JAS_PACKAGE_ELEMENT>
	: <JAS_CLASS_DECL>
	| <JAS_IMPORT_STATEMENT>
	;

<JAS_CLASS_DECL>
	: J_CLASS J_IDENTIFIER <JAS_CLASS_EXTENDS> "{" "}"
	| J_CLASS J_IDENTIFIER <JAS_CLASS_EXTENDS> "{" <JAS_CLASS_ELEMENTS> "}"
	| <JAS_ACCESS_DECL> J_CLASS J_IDENTIFIER <JAS_CLASS_EXTENDS> "{" "}"
	| <JAS_ACCESS_DECL> J_CLASS J_IDENTIFIER <JAS_CLASS_EXTENDS> "{" <JAS_CLASS_ELEMENTS> "}"
	;
	
<JAS_CLASS_EXTENDS>
	: P_EPSILON
	| J_EXTENDS <JAS_IDENTIFIER_CHAIN>
	;

<JAS_CLASS_ELEMENTS> 
	: <JAS_CLASS_ELEMENT>
	| <JAS_CLASS_ELEMENTS> <JAS_CLASS_ELEMENT> 
	;
	
<JAS_CLASS_ELEMENT>
	: <JAS_PROP_STATEMENT>
	| <JAS_METHOD_DECL>
	| <JAS_ABSTRACT_METHOD_DECL>
	| <JAS_IMPORT_STATEMENT>
	;
	
<JAS_ELEMENTS> 
	: <JAS_ELEMENT>
	| <JAS_ELEMENTS> <JAS_ELEMENT> 
	;

<JAS_ELEMENT>
	: <JAS_STATEMENT>
	| <JAS_FUNC_DECL>
	;


# Function, and Method definitions
# --------------------------------------
<JAS_FUNC_DECL> 
	: J_FUNCTION J_IDENTIFIER "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL> <JAS_FUNC_BODY>
	;
	
<JAS_METHOD_DECL>
	: J_FUNCTION <JAS_FUNC_ACCESSOR> J_IDENTIFIER "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL> <JAS_FUNC_BODY>
	| <JAS_ACCESS_DECL> J_FUNCTION <JAS_FUNC_ACCESSOR> J_IDENTIFIER "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL> <JAS_FUNC_BODY>
	;

<JAS_ABSTRACT_METHOD_DECL>
	: J_FUNCTION <JAS_FUNC_ACCESSOR> J_IDENTIFIER "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL> ";"
	| <JAS_ACCESS_DECL> J_FUNCTION <JAS_FUNC_ACCESSOR> J_IDENTIFIER "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL> ";"
	;

<JAS_FUNC_ACCESSOR>	
	: P_EPSILON
	| JAS_GET
	| JAS_SET
	;

# A function expression is allowed to have no body
#
<JAS_FUNC_EXPR> 
	: J_FUNCTION J_IDENTIFIER "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL> <JAS_FUNC_BODY>
	| J_FUNCTION J_IDENTIFIER "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL>
	| J_FUNCTION "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL> <JAS_FUNC_BODY>
	| J_FUNCTION "(" <JAS_FUNC_PARAMS> ")" <JAS_TYPE_DECL>
	;

<JAS_FUNC_PARAMS>
	: P_EPSILON
	| <JAS_REST>
	| <JAS_PARAM_LIST>
	| <JAS_PARAM_LIST> "," <JAS_REST>
	;

<JAS_PARAM_LIST> 
	: <JAS_PARAM> 
	| <JAS_PARAM_LIST> "," <JAS_PARAM> 
	;

<JAS_PARAM> 
	: J_IDENTIFIER <JAS_TYPE_DECL> <JAS_PARAM_INITIALIZER>
	;
	
<JAS_PARAM_INITIALIZER>
	: P_EPSILON
	| "=" <JAS_COND_EXPR>
	;
	

<JAS_FUNC_BODY>
	: "{" "}"
	| "{" <JAS_ELEMENTS> "}"
	;
	
#	
<JAS_TYPE_DECL>
	: P_EPSILON
	| ":" <JAS_IDENTIFIER_CHAIN>
	| ":" J_VOID
	;	
	
<JAS_ACCESS_DECL>
	: <JAS_ACCESS_KEYWORD>
	| <JAS_ACCESS_DECL> <JAS_ACCESS_KEYWORD> 
	;

<JAS_ACCESS_KEYWORD>
	: J_PRIVATE
	| J_PUBLIC
	| J_STATIC
	| J_FINAL
	| J_PROTECTED
	| J_NATIVE
	| JAS_INTERNAL
	| JAS_DYNAMIC
	| JAS_OVERRIDE
	;
	
		   

# Statements
#
<JAS_STATEMENT> 
	: <JAS_IMPORT_STATEMENT>
	| <JAS_INCLUDE_STATEMENT>
	| <JAS_BLOCK>
	| <JAS_VAR_STATEMENT> 
	| <JAS_EMPTY_STATEMENT>
	| <JAS_EXPR_STATEMENT> 
	| <JAS_IF_STATEMENT>  
	| <JAS_ITER_STATEMENT>
	| <JAS_CONT_STATEMENT>
	| <JAS_BREAK_STATEMENT> 
	| <JAS_RETURN_STATEMENT> 
	| <JAS_WITH_STATEMENT>
	| <JAS_LABELLED_STATEMENT> 
	| <JAS_SWITCH_STATEMENT>
	| <JAS_THROW_STATEMENT> 
	| <JAS_TRY_STATEMENT>
	;


<JAS_IMPORT_STATEMENT>
	: J_IMPORT "*" ";"
	| J_IMPORT <JAS_IDENTIFIER_CHAIN> ";"
	| J_IMPORT <JAS_IDENTIFIER_CHAIN> "." "*" ";"
	;
	
<JAS_INCLUDE_STATEMENT>
	: JAS_INCLUDE J_STRING_LITERAL ";"
	;	
	
<JAS_BLOCK> 
	: "{" "}" 
	| "{" <JAS_STATEMENT_LIST> "}"
	;

<JAS_STATEMENT_LIST> 
	: <JAS_STATEMENT>
	| <JAS_STATEMENT_LIST> <JAS_STATEMENT>
	;


# Variable Statements -
# Extended for class and package properties
#
<JAS_PROP_STATEMENT>
	: <JAS_VAR_STATEMENT>
	| <JAS_ACCESS_DECL> <JAS_VAR_STATEMENT>
	;

<JAS_VAR_STATEMENT> 
	: J_VAR <JAS_VAR_DECL_LIST> ";"
	| J_CONST <JAS_VAR_DECL_LIST> ";"
	;
	
<JAS_VAR_DECL_LIST> 
	: <JAS_VAR_DECL>
	| <JAS_VAR_DECL_LIST> "," <JAS_VAR_DECL>
	;

<JAS_VAR_DECL_LIST_NO_IN> 
	: <JAS_VAR_DECL_NO_IN>
	| <JAS_VAR_DECL_LIST_NO_IN> "," <JAS_VAR_DECL_NO_IN>
	;

<JAS_VAR_DECL> 
	: J_IDENTIFIER <JAS_TYPE_DECL>
	| J_IDENTIFIER <JAS_TYPE_DECL> <JAS_INITIALIZER>
	;

<JAS_VAR_DECL_NO_IN> 
	: J_IDENTIFIER <JAS_TYPE_DECL>
	| J_IDENTIFIER <JAS_TYPE_DECL> <JAS_INITIALIZER_NO_IN>
	;

<JAS_INITIALIZER> 
	: "=" <JAS_ASSIGN_EXPR>
	;

<JAS_INITIALIZER_NO_IN>
	: "=" <JAS_ASSIGN_EXPR_NO_IN>
	;
			  

# 12.3 - Empty Statement
<JAS_EMPTY_STATEMENT> 
	: ";"
	;


# 12.4 - Expression Statement
# - Cannot start with "{" or J_FUNCTION
# - Special Rule Processing, see Grammar::exclude_terminal
<JAS_EXPR_STATEMENT> 
	: <JAS_EXPR> ";" 
	;


# 12.5 - The IF Statement
# - Conflicts here on J_ELSE symbol but seems to work with a default shift
<JAS_IF_STATEMENT> 
	: J_IF "(" <JAS_EXPR> ")" <JAS_STATEMENT> J_ELSE <JAS_STATEMENT>
	| J_IF "(" <JAS_EXPR> ")" <JAS_STATEMENT>
	;

# 12.6 - Iterations Statements
<JAS_ITER_STATEMENT>
	: J_DO <JAS_STATEMENT> J_WHILE "(" <JAS_EXPR> ")" ";"
	| J_WHILE "(" <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" ";" ";" ")" <JAS_STATEMENT>
	| J_FOR "(" <JAS_EXPR_NO_IN> ";" ";" ")" <JAS_STATEMENT>
	| J_FOR "(" <JAS_EXPR_NO_IN> ";" <JAS_EXPR> ";" ")" <JAS_STATEMENT>
	| J_FOR "(" <JAS_EXPR_NO_IN> ";" <JAS_EXPR> ";" <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" <JAS_EXPR_NO_IN> ";" ";" <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" ";" <JAS_EXPR> ";" ")" <JAS_STATEMENT>
	| J_FOR "(" ";" <JAS_EXPR> ";" <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" ";" ";" <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" J_VAR <JAS_VAR_DECL_LIST_NO_IN> ";" ";" ")" <JAS_STATEMENT>
	| J_FOR "(" J_VAR <JAS_VAR_DECL_LIST_NO_IN> ";" <JAS_EXPR> ";" ")" <JAS_STATEMENT>
	| J_FOR "(" J_VAR <JAS_VAR_DECL_LIST_NO_IN> ";" ";" <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" J_VAR <JAS_VAR_DECL_LIST_NO_IN> ";" <JAS_EXPR> ";" <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" <JAS_LHS_EXPR> J_IN <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR "(" J_VAR <JAS_VAR_DECL_NO_IN> J_IN <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR JAS_EACH "(" J_VAR <JAS_VAR_DECL_NO_IN> J_IN <JAS_EXPR> ")" <JAS_STATEMENT>
	| J_FOR JAS_EACH "(" <JAS_LHS_EXPR> J_IN <JAS_EXPR> ")" <JAS_STATEMENT>
	;

# 12.7 - Continue Statement 
# ( No line terminator after J_CONTINUE )
<JAS_CONT_STATEMENT> 
	: J_CONTINUE ";"
	| J_CONTINUE J_IDENTIFIER ";"
	;

# 12.8 - Break Statement
# ( No line terminator after J_BREAK )
<JAS_BREAK_STATEMENT> 
	: J_BREAK ";"
	| J_BREAK J_IDENTIFIER ";"
	;

# 12.9 - Return Statement
# ( No line terminator after J_RETURN )
<JAS_RETURN_STATEMENT> 
	: J_RETURN ";"
	| J_RETURN <JAS_EXPR> ";"
	;

# 12.10 - With Statement
<JAS_WITH_STATEMENT> 
	: J_WITH "(" <JAS_EXPR> ")" <JAS_STATEMENT>
	;

# 12.11 - Switch Statement
<JAS_SWITCH_STATEMENT> 
	: J_SWITCH "(" <JAS_EXPR> ")" <JAS_CASE_BLOCK>
	;

<JAS_CASE_BLOCK> 
	: "{" "}"
	| "{" <JAS_CASE_CLAUSES> "}"
	| "{" <JAS_CASE_DEFAULT> "}"
	| "{" <JAS_CASE_DEFAULT> <JAS_CASE_CLAUSES> "}"
	| "{" <JAS_CASE_CLAUSES> <JAS_CASE_DEFAULT> "}"
	| "{" <JAS_CASE_CLAUSES> <JAS_CASE_DEFAULT> <JAS_CASE_CLAUSES> "}"
	;
	
<JAS_CASE_CLAUSES> 
	: <JAS_CASE_CLAUSE>
	| <JAS_CASE_CLAUSES> <JAS_CASE_CLAUSE>
	;

<JAS_CASE_CLAUSE> 
	: J_CASE <JAS_EXPR> ":"
	| J_CASE <JAS_EXPR> ":" <JAS_STATEMENT_LIST>
	;

<JAS_CASE_DEFAULT> 
	: J_DEFAULT ":"
	| J_DEFAULT ":" <JAS_STATEMENT_LIST>
	;


# 12.12 - Labelled Statements
<JAS_LABELLED_STATEMENT> 
	: J_IDENTIFIER ":" <JAS_STATEMENT>
	;

# 12.13 - The "throw" Statement
# ( No line terminator after J_THROW )
<JAS_THROW_STATEMENT> 
	: J_THROW <JAS_EXPR> ";"
	;

# 12.14 - The "try" Statement
<JAS_TRY_STATEMENT> 
	: J_TRY <JAS_BLOCK> <JAS_CATCH_CLAUSE>
	| J_TRY <JAS_BLOCK> <JAS_FINALLY_CLAUSE>
	| J_TRY <JAS_BLOCK> <JAS_CATCH_CLAUSE> <JAS_FINALLY_CLAUSE>
	;

<JAS_CATCH_CLAUSE> 
	: J_CATCH "(" J_IDENTIFIER <JAS_TYPE_DECL> ")" <JAS_BLOCK>
	;

<JAS_FINALLY_CLAUSE> 
	: J_FINALLY <JAS_BLOCK>
	;





# 11 - Expressions
# ----------------
# 11.1 
<JAS_PRIMARY_EXPR> 
	: J_THIS
	| J_IDENTIFIER
	| J_STRING_LITERAL
	| J_NUMERIC_LITERAL
	| J_TRUE
	| J_FALSE
	| J_NULL
	| J_REGEX
	| <JAS_ARRAY_LITERAL>
	| <JAS_OBJECT_LITERAL>
	| "(" <JAS_EXPR> ")"
	;
				   

# 11.1.4
# ( As per the spec, but extra commas are odd, as it is in the elision rule too )
<JAS_ARRAY_LITERAL> 
	: "[" "]" 
	| "[" <JAS_ELISION> "]" 
	| "[" <JAS_ELEMENT_LIST> "]" 
	| "[" <JAS_ELEMENT_LIST> "," "]"
	| "[" <JAS_ELEMENT_LIST> "," <JAS_ELISION> "]"
	;

<JAS_ELEMENT_LIST> 
	: <JAS_ASSIGN_EXPR>
	| <JAS_ELISION> <JAS_ASSIGN_EXPR>
	| <JAS_ELEMENT_LIST> "," <JAS_ASSIGN_EXPR>
	| <JAS_ELEMENT_LIST> "," <JAS_ELISION> <JAS_ASSIGN_EXPR>
	;
	
# Elision is permitted empty elements, e.g. ",,,"
<JAS_ELISION> 
	: ","
	| <JAS_ELISION> ","
	;
						 
# 11.1.5
<JAS_OBJECT_LITERAL> 
	: "{" "}"
	| "{" <JAS_PROP_LIST> "}"
	;

<JAS_PROP_LIST> 
	: <JAS_PROP_NAME> ":" <JAS_ASSIGN_EXPR>
	| <JAS_PROP_LIST> "," <JAS_PROP_NAME> ":" <JAS_ASSIGN_EXPR>
	;
						 
<JAS_PROP_NAME> 
	: J_IDENTIFIER
	| J_STRING_LITERAL 
	| J_NUMERIC_LITERAL
	;


# 11.2 - Left Hand Side Expressions
<JAS_MEMBER_EXPR>
    : J_SUPER 
	| <JAS_PRIMARY_EXPR>
	| <JAS_FUNC_EXPR>
	| <JAS_MEMBER_EXPR> <JAS_PROPERTY_SUFFIX>
	| J_NEW <JAS_MEMBER_EXPR> <JAS_ARGS>
	;
				
<JAS_NEW_EXPR> 
	: <JAS_MEMBER_EXPR>
	| J_NEW <JAS_NEW_EXPR>
	;

<JAS_CALL_EXPR> 
	: <JAS_MEMBER_EXPR> <JAS_ARGS>
	| <JAS_CALL_EXPR> <JAS_ARGS>
	| <JAS_CALL_EXPR> <JAS_PROPERTY_SUFFIX>
	;
	
<JAS_PROPERTY_SUFFIX>
	: "." J_IDENTIFIER
	| "[" <JAS_EXPR> "]"
	;
	
<JAS_ARGS> 
	: "(" ")"
	| "(" <JAS_ARG_LIST> ")"
	;
		   
<JAS_ARG_LIST>
	: <JAS_ASSIGN_EXPR>
	| <JAS_ARG_LIST> "," <JAS_ASSIGN_EXPR> 
	;
			   
<JAS_LHS_EXPR> 
	: <JAS_NEW_EXPR>
	| <JAS_CALL_EXPR>
	;

# 11.3 - Postfix Expressions
# (No line terminator before operators)
<JAS_POSTFIX_EXPR> 
	: <JAS_LHS_EXPR> 
	| <JAS_LHS_EXPR> "++"
	| <JAS_LHS_EXPR> "--"
	;

# 11.4 - Unary Operators
<JAS_UNARY_EXPR> 
	: <JAS_POSTFIX_EXPR>
	| J_DELETE <JAS_UNARY_EXPR>
	| J_VOID <JAS_UNARY_EXPR>
	| J_TYPEOF <JAS_UNARY_EXPR>
	| "++" <JAS_UNARY_EXPR>
	| "--" <JAS_UNARY_EXPR>
	| "+" <JAS_UNARY_EXPR>
	| "-" <JAS_UNARY_EXPR> 
	| "~" <JAS_UNARY_EXPR>
	| "!" <JAS_UNARY_EXPR>
	;

# 11.5 - Multiplicative Operators & 11.6 - Additive Operators & 11.7 - Bitwise Shift Operators
<JAS_NUM_EXPR> 
	: <JAS_UNARY_EXPR>
	| <JAS_NUM_EXPR> <JAS_NUM_OP> <JAS_UNARY_EXPR>
	;

<JAS_NUM_OP>
	: "*"
	| "/"
	| "%"
	| "+"
	| "-"
	| "<<"
	| ">>"
	| ">>>"
	;	
	
# AS3-style "as" operator
<JAS_AS_EXPR>
	: <JAS_NUM_EXPR>
	| <JAS_AS_EXPR> JAS_AS <JAS_NUM_EXPR>
	;

<JAS_AS_EXPR_NO_IN>
	: <JAS_NUM_EXPR>
	| <JAS_AS_EXPR_NO_IN> JAS_AS <JAS_NUM_EXPR>
	;
	
# 11.8 - Relational Operators & Equality Operators
<JAS_REL_EXPR> 
	: <JAS_AS_EXPR>
	| <JAS_REL_EXPR> <JAS_REL_OP> <JAS_AS_EXPR>
	| <JAS_REL_EXPR> J_IN <JAS_AS_EXPR>
	;

# NOTE -
# The "NoIn" variants are needed to to avoid confusing the J_IN operator in a relational expression with the J_IN operator in a for statement 
<JAS_REL_EXPR_NO_IN> 
	: <JAS_AS_EXPR_NO_IN>
	| <JAS_REL_EXPR_NO_IN> <JAS_REL_OP> <JAS_AS_EXPR_NO_IN>
	;

<JAS_REL_OP>
	: ">"
	| "<"
	| ">="
	| "<="
	| ">="
	| "=="
	| "!="
	| "==="
	| "!=="
	| J_INSTANCEOF
	| JAS_IS
	;	
	

# Binary Bitwise Operations			  
<JAS_BITWISE_EXPR> 
	: <JAS_REL_EXPR>
	| <JAS_BITWISE_EXPR> <JAS_BITWISE_OP> <JAS_REL_EXPR>
	;
			  
<JAS_BITWISE_EXPR_NO_IN> 
	: <JAS_REL_EXPR_NO_IN>
	| <JAS_BITWISE_EXPR_NO_IN> <JAS_BITWISE_OP> <JAS_REL_EXPR_NO_IN>
	;
	
<JAS_BITWISE_OP>
	: "&"
	| "|"
	| "^"
	;	

#  Binary Logical Operators
<JAS_LOGICAL_EXPR> 
	: <JAS_BITWISE_EXPR>
	| <JAS_LOGICAL_EXPR> <JAS_LOGICAL_OP> <JAS_BITWISE_EXPR>
	;

<JAS_LOGICAL_EXPR_NO_IN> 
	: <JAS_BITWISE_EXPR_NO_IN>
	| <JAS_LOGICAL_EXPR_NO_IN> <JAS_LOGICAL_OP> <JAS_BITWISE_EXPR_NO_IN>
	;
	
<JAS_LOGICAL_OP>
	: "&&"
	| "||"
	;	
				   
# 11.12 - Conditional Operator ( ? : )
<JAS_COND_EXPR> 
	: <JAS_LOGICAL_EXPR> 
	| <JAS_LOGICAL_EXPR> "?" <JAS_ASSIGN_EXPR> ":" <JAS_ASSIGN_EXPR>
	;
				
<JAS_COND_EXPR_NO_IN> 
	: <JAS_LOGICAL_EXPR_NO_IN> 
	| <JAS_LOGICAL_EXPR_NO_IN> "?" <JAS_ASSIGN_EXPR_NO_IN> ":" <JAS_ASSIGN_EXPR_NO_IN>
	;
				

# 11.13 - Assignment Operators
<JAS_ASSIGN_EXPR> 
	: <JAS_COND_EXPR>
	| <JAS_LHS_EXPR> <JAS_ASSIGN_OP> <JAS_ASSIGN_EXPR>
	;

<JAS_ASSIGN_EXPR_NO_IN> 
	: <JAS_COND_EXPR_NO_IN>
	| <JAS_LHS_EXPR> <JAS_ASSIGN_OP> <JAS_ASSIGN_EXPR_NO_IN>
	;

<JAS_ASSIGN_OP>	
	: "="
	| "*="
	| "/="
	| "%="
	| "+="
	| "-="
	| "<<="
	| ">>="
	| ">>>="
	| "&="
	| "|="
	| "^="
	;

# 11.14 - Comma Operator
<JAS_EXPR> 
	: <JAS_ASSIGN_EXPR>
	| <JAS_EXPR> "," <JAS_ASSIGN_EXPR>
	;

<JAS_EXPR_NO_IN> 
	: <JAS_ASSIGN_EXPR_NO_IN>
	| <JAS_EXPR_NO_IN> "," <JAS_ASSIGN_EXPR_NO_IN>
	;


# AS3-style Rest Args operator
<JAS_REST>
	: "..." J_IDENTIFIER <JAS_TYPE_DECL>
	;

	
# Extra symbols not in any grammar rules but required to be in the lex
# 
<JAS_IGNORE> 
	: J_COMMENT
	| J_WHITESPACE
	| J_LINE_TERMINATOR
	;
	
# Extra symbols that are reserved to remain compatible with ECMA 262 Edition 3
# Or are reserved for future compatibility with ActionScript 3
# Also ECMAScript reserved words that are not reserved in AS3 are removed from here
# 
<JAS_RESERVED>
	: J_ABSTRACT
	| J_ENUM  
	| J_SHORT
	| J_BOOLEAN  
	| J_EXPORT  
	| J_BYTE  
	| J_LONG  
	| J_CHAR
	| J_SYNCHRONIZED
	| J_FLOAT  
	| J_THROWS
	| J_GOTO  
	| J_TRANSIENT
	| J_DEBUGGER  
	| J_VOLATILE
	| J_DOUBLE  
	| J_INTERFACE
	| J_IMPLEMENTS
	| JAS_USE
	| JAS_NAMESPACE
	;
		
	


